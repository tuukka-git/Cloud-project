apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    cert-manager.io/disable-validation: "true"

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager
  namespace: cert-manager

---

apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: selfsigned-issuer
  namespace: default
spec:
  selfSigned: {}

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: backend-cert
  namespace: default
spec:
  secretName: backend-tls
  duration: 8760h  # One year
  renewBefore: 240h  # 10 days before expiration
  issuerRef:
    name: selfsigned-issuer
    kind: Issuer
  commonName: team-gen  # Replace with your domain
  dnsNames:
    - team-gen  # Replace with your domain

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: frontend-cert
  namespace: default
spec:
  secretName: frontend-tls
  duration: 8760h  # One year
  renewBefore: 240h  # 10 days before expiration
  issuerRef:
    name: selfsigned-issuer
    kind: Issuer
  commonName: team-gen  # Replace with your domain
  dnsNames:
    - team-gen  # Replace with your domain

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: team-gen  # This is the domain
      http:
        paths:
          - path: /api(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: backend-service
                port:
                  number: 8080
  tls:
    - hosts:
        - team-gen
      secretName: backend-tls

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: team-gen
      http:
        paths:
          - path: / 
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 3000
  tls:
    - hosts:
        - team-gen
      secretName: frontend-tls

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/postgres  # Ensure Minikube has permissions for this path

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db
  template:
    metadata:
      labels:
        app: db
    spec:
      containers:
        - name: postgres
          image: postgres:16
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "myuser"
            - name: POSTGRES_PASSWORD
              value: "mypassword"
            - name: POSTGRES_DB
              value: "mydb"
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          readinessProbe:
            exec:
              command:
                - "pg_isready"
                - "-U"
                - "postgres"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  ports:
    - port: 5432
      targetPort: 5432
      name: db
  selector:
    app: db
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          imagePullPolicy: Never  # Avoids pulling from a registry
          image: team-gen-backend  # Ensure this image is loaded in Minikube
          ports:
            - containerPort: 8080
          env:
            - name: DATABASE_URL
              value: "postgres://myuser:mypassword@db-service:5432/mydb"
            - name: ENV
              value: "DEV"

---

apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  ports:
    - port: 8080
      targetPort: 8080
      name: http
  selector:
    app: backend
  type: ClusterIP

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          imagePullPolicy: Never  # Avoids pulling from a registry
          image: team-gen-frontend  # Ensure this image is loaded in Minikube
          ports:
            - containerPort: 3000

---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  selector:
    app: frontend
  type: ClusterIP
